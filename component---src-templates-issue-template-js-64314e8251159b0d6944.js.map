{"version":3,"sources":["webpack:///./src/templates/issueTemplate.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/link.js","webpack:///./src/components/image.js"],"names":["IssueTemplate","_ref","markdownRemark","data","fileAbsolutePath","frontmatter","htmlAst","timeToRead","renderAst","rehypeReact","createElement","React","components","a","Link","img","props","src","otherProps","_objectWithoutPropertiesLoose","_src","path","resolve","dirname","react__WEBPACK_IMPORTED_MODULE_5___default","_components_image__WEBPACK_IMPORTED_MODULE_10__","Object","assign","Compiler","_components_layout__WEBPACK_IMPORTED_MODULE_6__","_components_seo__WEBPACK_IMPORTED_MODULE_7__","title","className","date","pageQuery","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","__webpack_exports__","createContext","PropTypes","object","string","isRequired","func","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","propTypes","shape","pathname","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","arrayOf","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","to","color","textDecoration","Layout","children","_856328897","Fragment","header","paddingTop","Date","getFullYear","href","node","isExternal","match","isHash","react__WEBPACK_IMPORTED_MODULE_6___default","gatsby_plugin_google_analytics__WEBPACK_IMPORTED_MODULE_8__","target","rel","_href","gatsby__WEBPACK_IMPORTED_MODULE_7__","Image","image","_public_static_d_3097825145_json__WEBPACK_IMPORTED_MODULE_6__","images","edges","find","edge","relativePath","absolutePath","react__WEBPACK_IMPORTED_MODULE_7___default","gatsby_image__WEBPACK_IMPORTED_MODULE_8___default","alt","fluid","childImageSharp"],"mappings":"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","file":"component---src-templates-issue-template-js-64314e8251159b0d6944.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport rehypeReact from 'rehype-react'\nimport Link from '../components/link'\nimport Image from '../components/image'\nimport path from 'path'\n\nexport default function IssueTemplate({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { fileAbsolutePath, frontmatter, htmlAst, timeToRead } = markdownRemark\n  const renderAst = new rehypeReact({\n    createElement: React.createElement,\n    components: {\n      a: Link,\n      img: props => {\n        const { src, ...otherProps } = props\n        const _src = path.resolve(path.dirname(fileAbsolutePath), src)\n        return <Image src={_src} {...otherProps} />\n      },\n    },\n  }).Compiler\n  return (\n    <Layout>\n      <SEO title={frontmatter.title} />\n      <div className='blog-post-container'>\n        <div className='blog-post'>\n          <h1>{frontmatter.title}</h1>\n          <h2>{frontmatter.date}</h2>\n          <p>{timeToRead} min read</p>\n          <div className='blog-post-content'>{renderAst(htmlAst)}</div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($fileAbsolutePath: String!) {\n    markdownRemark(fileAbsolutePath: { eq: $fileAbsolutePath }) {\n      fileAbsolutePath\n      htmlAst\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n      }\n      timeToRead\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: 'rebeccapurple',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to='/'\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport './layout.css'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: '0 auto',\n          maxWidth: 960,\n          padding: '0px 1.0875rem 1.45rem',\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with{' '}\n          <a href='https://www.gatsbyjs.org'>Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport { Link as GatsbyLink } from 'gatsby'\nimport { OutboundLink } from 'gatsby-plugin-google-analytics'\n\nconst Link = props => {\n  const { href, children, ...otherProps } = props\n  const isExternal = href.match(/^https?:/)\n  const isHash = href.match(/^#/)\n  if (isExternal) {\n    return (\n      <OutboundLink\n        {...otherProps}\n        href={href}\n        target='_blank'\n        rel='noreferrer'\n      >\n        {children}\n      </OutboundLink>\n    )\n  }\n  if (isHash) {\n    return (\n      <a {...otherProps} href={href}>\n        {children}\n      </a>\n    )\n  }\n  const _href = (href && href[0] !== '/' && `/${href}`) || href\n  return (\n    <GatsbyLink {...otherProps} to={_href}>\n      {children}\n    </GatsbyLink>\n  )\n}\n\nexport default Link\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst Image = props => {\n  const { src, ...otherProps } = props\n\n  const data = useStaticQuery(graphql`\n    query {\n      images: allFile {\n        edges {\n          node {\n            absolutePath\n            relativePath\n            name\n            childImageSharp {\n              fluid(maxWidth: 700) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const image = data.images.edges.find(edge => {\n    return edge.node.relativePath === src || edge.node.absolutePath === src\n  })\n\n  if (!image) {\n    return <img alt='' {...otherProps} src='' />\n  }\n\n  return <Img alt='' {...otherProps} fluid={image.node.childImageSharp.fluid} />\n}\n\nexport default Image\n"],"sourceRoot":""}